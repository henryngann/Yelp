//First - Set Up CRUD Routes - Full Stack App Steps

//Created an instance of an express app and stored it in a variable called app
const app = express()
//Telling our express app to listen on a specific port
app.listen(4040,()=>{
    once server is up and running, run this call back function
})
//To create a route, you must reference your express instance.

//first arg:url the front end is sending an http request too
//second param is a call back function that takes (req,res)
app.get("/url",(req,res)=>{
    res.send("") => sends data back to the front end, the response.
})

//create middleware
//next identifies the next place it should route too whether it be
//another middle ware or the route handler
app.use((req,res,next)=>{})

//app.use(express.json)
//Express has its own middle ware
//it takes information from the body and attaches it to the request object

//Connect Express to PostgreSQL

Set up a database folder with index.js and in that index.js, create a pool.

This will allow you to connect express.js to postgres

then do const db = require("./db"); in your server.js to access it

we now have access to things like db.query("select * from restaurants");

If you are querying and you want to extract the query results, make sure you put it in a 
try catch block if u r using async await


`select * from restaurants where id = ${req.params.id}` -> use $1 syntax to prevent sql injection attacks


SECOND -- Set up react 

Set up React by cding out and doing create-react-app

THIRD -- Set up Routing 

Install react-router-dom and create a folder called routes.

This is where you should handle all your routing and where the components will be held that handle
the 3 pages

import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link
} from "react-router-dom";

<Router>
        <Route exact path="/" component={Home} />
      </Router>

Set up Router Parent Component first then use a route component to set up a route.

Once / is hit, the component we want to load is {home}.

Best Practice to wrap it in a switch because:
Add a switch component because if you match a route, it'll stop looking for routes
and return the route found.
Stops react router from loading multiple components

FOURTH - Context API

We can choose to hand data down using props but that can be tedious. Therefore its important
that we set up a context api to store results rather then a local state because all the components
in our app can then retrieve that data because every component has access to the contextAPI