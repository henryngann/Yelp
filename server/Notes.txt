//First - Set Up CRUD Routes - Full Stack App Steps

//Created an instance of an express app and stored it in a variable called app
const app = express()
//Telling our express app to listen on a specific port
app.listen(4040,()=>{
    once server is up and running, run this call back function
})
//To create a route, you must reference your express instance.

//first arg:url the front end is sending an http request too
//second param is a call back function that takes (req,res)
app.get("/url",(req,res)=>{
    res.send("") => sends data back to the front end, the response.
})

//create middleware
//next identifies the next place it should route too whether it be
//another middle ware or the route handler
app.use((req,res,next)=>{})

//app.use(express.json)
//Express has its own middle ware
//it takes information from the body and attaches it to the request object

//Connect Express to PostgreSQL

Set up a database folder with index.js and in that index.js, create a pool.

This will allow you to connect express.js to postgres

then do const db = require("./db"); in your server.js to access it

we now have access to things like db.query("select * from restaurants");

If you are querying and you want to extract the query results, make sure you put it in a 
try catch block if u r using async await


`select * from restaurants where id = ${req.params.id}` -> use $1 syntax to prevent sql injection attacks


SECOND -- Set up react 

Set up React by cding out and doing create-react-app

THIRD -- Set up Routing 

Install react-router-dom and create a folder called routes.

This is where you should handle all your routing and where the components will be held that handle
the 3 pages

import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link
} from "react-router-dom";

<Router>
        <Route exact path="/" component={Home} />
      </Router>

Set up Router Parent Component first then use a route component to set up a route.

Once / is hit, the component we want to load is {home}.

Best Practice to wrap it in a switch because:
Add a switch component because if you match a route, it'll stop looking for routes
and return the route found.
Stops react router from loading multiple components

FOURTH - Context API

We can choose to hand data down using props but that can be tedious. Therefore its important
that we set up a context api to store results rather then a local state because all the components
in our app can then retrieve that data because every component has access to the contextAPI\

export const RestaurantsContext = createContext(); -> Creates Context

RestaurantsContextProvider -> Wraps our components so they all have access to our state

useState() hook to store our data

<RestaurantsContext.Provider
      value={{ restaurants: restaurants, setRestaurants }}
    >

    add value to pass down restaurants, and pass down setRestaurants so state can be updated

FIFTH - Connect frontend to BACKEND by fetching data from our backend api

Use axios to make api requests to our backend server.

Create api folder and api file

Create an axios instance and connect it to your backend port

Connect it to a component to fetch data from back end server

We want the component to fetch the data as soon as the component mounts on the screen

To do this, we use the useEffect() hook.

  // First Param is an arrow function that is a call back.
  //It does all the things we need to do when the component mounts.
  //The second one is an empty dependency array
  //If you dont have this, itll keep rerunning every time the component renders
  //which is an infinitel loop

Within the useEffect hook, we are going to make an api call to our backend using the instance
of axios we created.

Since its an api call, we need to do async and await + a try and catch block

We need to set up a policy that allows our front end to connect with our backend.

Both use different ports/domains.

Therefore we do app,use(cors()) which is a middleware . npm install cors --save

This will allow our back end to communicate with our frontend because on default, 2 diff domains cannot
talk to each other

We have a   warning error becasue useeffect doesnt like it when you return something
so what we did instead was make a function that returned something and 
use effect simply calls that function

<RestaurantsContext.Provider value={{ restaurants, setRestaurants }}>

We want to store our data in restaurants because the data will be avaliable in the context api.

To do this, we'll use the useContext hook and in order to do that, we have to use

the context we created with createContext();
export const RestaurantsContext = createContext();

so now we say we want to use this context by doing 

useContext(RestaurantsContext)

after that, we simply destructure the context by doing

const [restaurants, setRestaurants] = useContext(RestaurantsContext)

keep in mind, this value is passed down in the 

<RestaurantsContext.Provider value={{ restaurants, setRestaurants }}>

now after all this we can now set the state by doing

setRestaurants(response.data.data.restaurants);

//The default behaviour is to reload the page
    //When you submit a form

    //doing preventDefault() stops it from reloading the page

    try {
      RestaurantFinder.post("/", {
        name: name,
        location: location,
        price_range: priceRange,
      });

      ^ the second param is req.body